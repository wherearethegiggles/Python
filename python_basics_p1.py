# -*- coding: utf-8 -*-
"""Python Basics- P1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UVdlcujAE4lJ2afVMyBYnNI14iVHiik

Write a Python program to enter marks of five subjects and calculate
total, average and percentage.
"""

def mark_cal():
  marks = []
  total_marks = 0

  #Input
  for i in range(5):
    subject_marks = float(input(f"Enter each subject marks {i+1}: "))
    marks.append(subject_marks)
    total_marks += subject_marks
  
  Avg = total_marks / 5
  Percentage = (total_marks / (5 * 100) * 100)

  #Output
  print("\nmarks entered", marks)
  print("Total marks", total_marks)
  print("Average", Avg)
  print("Percentage", Percentage)

mark_cal()

"""Enter basic salary as user input user. Write a Python program to
calculate DA and HRA
"""

def Salary_cal():
  Basic_Salary = float(input(f"Enter your salary: "))

  DA = 0.4 * Basic_Salary
  HRA = 0.2 * Basic_Salary

  print("Basic Salary" , Basic_Salary)
  print("DA" , DA)
  print("HRA", HRA)
Salary_cal()

"""Write a Python program to find the greatest number among three
given numbers.
"""

def find_greatest_number():
    # Input three numbers from the user
    num1 = float(input("Enter the first number: "))
    num2 = float(input("Enter the second number: "))
    num3 = float(input("Enter the third number: "))

    # Compare the numbers to find the greatest
    if num1 >= num2 and num1 >= num3:
        greatest = num1
    elif num2 >= num1 and num2 >= num3:
        greatest = num2
    else:
        greatest = num3

    # Print the greatest number
    print("The greatest number is:", greatest)


# Call the function
find_greatest_number()

"""Write a Python program to perform arithmetic operations"""

def perform_arithmetic_operations():
    num1 = float(input("Enter the first number: "))
    num2 = float(input("Enter the second number: "))

    # Addition
    addition = num1 + num2
    print("Addition:", addition)

    # Subtraction
    subtraction = num1 - num2
    print("Subtraction:", subtraction)

    # Multiplication
    multiplication = num1 * num2
    print("Multiplication:", multiplication)

    # Division
    if num2 != 0:
        division = num1 / num2
        print("Division:", division)
    else:
        print("Cannot divide by zero.")


# Call the function
perform_arithmetic_operations()

"""Write a Python program to assign grades to a student using
Nested If Else statement. Get the percentage of marks as input
from the user. 
"""

def assign_grades():
    percentage = float(input("Enter the percentage of marks: "))

    if percentage >= 90:
        grade = 'A'
    elif percentage >= 80:
        grade = 'B'
    elif percentage >= 70:
        grade = 'C'
    elif percentage >= 60:
        grade = 'D'
    elif percentage >= 50:
        grade = 'E'
    else:
        grade = 'F'

    print("Grade:", grade)


# Call the function
assign_grades()

"""Demonstrate the following Python Set operations with suitable examples:

(a) Creating a Set
(b) Modifying a Set [add(), discard(), remove(), pop(), clear()]
(c) Set operations [union, intersection, difference, symmetric difference
"""

fruits = {'apple', 'banana', 'orange'}

# Adding an element to the set
fruits.add('grape')
print(fruits)  # Output: {'banana', 'orange', 'apple', 'grape'}

# Removing an element from the set using discard()
fruits.discard('banana')
print(fruits)  # Output: {'orange', 'apple', 'grape'}

# Removing an element from the set using remove()
fruits.remove('orange')
print(fruits)  # Output: {'apple', 'grape'}

# Removing and returning an arbitrary element using pop()
popped_element = fruits.pop()
print("Popped Element:", popped_element)
print(fruits)  # Output: {'grape'}

# Clearing the set
fruits.clear()
print(fruits)

set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7}

# Union of sets
union_set = set1.union(set2)
print("Union:", union_set)  # Output: {1, 2, 3, 4, 5, 6, 7}

# Intersection of sets
intersection_set = set1.intersection(set2)
print("Intersection:", intersection_set)  # Output: {4, 5}

# Difference of sets
difference_set = set1.difference(set2)
print("Difference:", difference_set)  # Output: {1, 2, 3}

# Symmetric difference of sets
symmetric_difference_set = set1.symmetric_difference(set2)
print("Symmetric Difference:", symmetric_difference_set)  # Output: {1, 2, 3, 6, 7}

"""Demonstrate the implementation of exception handling mechanism in Python. (Use
try, except, finally and raise statement)
"""

def divide_numbers():
    try:
        dividend = int(input("Enter the dividend: "))
        divisor = int(input("Enter the divisor: "))

        result = dividend / divisor
        print("Result:", result)

    except ValueError:
        print("Invalid input. Please enter valid integers.")

    except ZeroDivisionError:
        print("Error: Division by zero is not allowed.")

    finally:
        print("Finally block executed.")

        # Custom exception raising example
        if divisor == 0:
            raise Exception("Custom Exception: Cannot divide by zero.")

try:
    divide_numbers()
except Exception as e:
    print(str(e))

"""Demonstrate the implementation of the following object oriented concepts in Python
using any scenario of your choice:
(a) Creating a class with member variables and member methods
(b) Creating an object and accessing the class variables and methods
(c) Constructors
(d) Inheritance
"""

class BankAccount:
    def __init__(self, account_number, account_holder_name, balance):
        self.account_number = account_number
        self.account_holder_name = account_holder_name
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print("Deposit of", amount, "successful.")

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
            print("Withdrawal of", amount, "successful.")
        else:
            print("Insufficient balance.")

    def display_balance(self):
        print("Account Balance:", self.balance)

# Create an object of BankAccount
account1 = BankAccount("1234567890", "John Doe", 1000.0)

# Accessing class variables
print("Account Number:", account1.account_number)
print("Account Holder Name:", account1.account_holder_name)

# Accessing class methods
account1.deposit(500.0)
account1.withdraw(200.0)
account1.display_balance()

class SavingsAccount(BankAccount):
    def __init__(self, account_number, account_holder_name, balance, interest_rate):
        super().__init__(account_number, account_holder_name, balance)
        self.interest_rate = interest_rate

    def calculate_interest(self):
        interest = self.balance * self.interest_rate / 100
        print("Calculated Interest:", interest)
# Create an object of SavingsAccount
savings_account = SavingsAccount("9876543210", "Jane Smith", 2000.0, 2.5)

# Access inherited member variables and methods
print("Account Holder Name:", savings_account.account_holder_name)
savings_account.display_balance()

# Access additional member variable and method
print("Interest Rate:", savings_account.interest_rate)
savings_account.calculate_interest()

"""(1) Demonstrate the following Numpy functions:
  (a) Arithmetic functions:
    add(), subtract(), multiply(), divide(), floor_divide()
"""

import numpy as np

# Creating two arrays
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# Using add()
result_add = np.add(arr1, arr2)
print("Addition:", result_add)

# Using subtract()
result_subtract = np.subtract(arr1, arr2)
print("Subtraction:", result_subtract)

# Using multiply()
result_multiply = np.multiply(arr1, arr2)
print("Multiplication:", result_multiply)

# Using divide()
result_divide = np.divide(arr1, arr2)
print("Division:", result_divide)

# Using floor_divide()
result_floor_divide = np.floor_divide(arr1, arr2)
print("Floor Division:", result_floor_divide)

"""(b) Aggregate functions:
min(), max(), mean(), median(), std(), var(), percentile()
"""

import numpy as np

# Creating an array
arr = np.array([1, 2, 3, 4, 5])

# Using min()
result_min = np.min(arr)
print("Minimum value:", result_min)

# Using max()
result_max = np.max(arr)
print("Maximum value:", result_max)

# Using mean()
result_mean = np.mean(arr)
print("Mean value:", result_mean)

# Using median()
result_median = np.median(arr)
print("Median value:", result_median)

# Using std()
result_std = np.std(arr)
print("Standard deviation:", result_std)

# Using var()
result_var = np.var(arr)
print("Variance:", result_var)

# Using percentile()
result_percentile = np.percentile(arr, 75)
print("75th percentile:", result_percentile)

"""(2) Demonstrate the Numpy Broadcasting Rules with examples of your choice"""

import numpy as np

# Creating arrays of different shapes
arr1 = np.array([1, 2, 3])
arr2 = np.array([[4, 5, 6], [7, 8, 9]])

# Broadcasting example
result = arr1 + arr2
print(result)